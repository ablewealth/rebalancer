name: Test and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "ci-${{ github.ref }}"
  cancel-in-progress: true

jobs:
  test-backend:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x, 18.x, 20.x]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install backend dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run backend tests
        run: |
          cd backend
          npm run test:coverage
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: backend/coverage
          flags: backend
          name: backend-coverage
        if: matrix.node-version == '18.x'

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json
      
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run frontend tests
        run: |
          cd frontend
          npm test -- --coverage --watchAll=false
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build

  performance-test:
    runs-on: ubuntu-latest
    needs: [test-backend]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json
      
      - name: Install dependencies
        run: |
          cd backend
          npm ci
      
      - name: Run performance benchmarks
        run: |
          cd backend
          node -e "
            const TaxHarvestingCore = require('../shared/taxHarvestingCore');
            const PerformanceMonitor = require('../shared/performanceMonitor');
            
            const monitor = new PerformanceMonitor();
            const core = new TaxHarvestingCore();
            
            // Generate test portfolios of different sizes
            const sizes = [10, 50, 100, 500];
            
            console.log('=== PERFORMANCE BENCHMARK ===');
            
            for (const size of sizes) {
              const portfolio = Array.from({ length: size }, (_, i) => ({
                symbol: 'TEST' + i,
                quantity: 100,
                price: 50 + Math.random() * 100,
                costBasis: 40 + Math.random() * 80,
                unrealizedGain: (Math.random() - 0.5) * 1000,
                term: Math.random() > 0.5 ? 'Long' : 'Short',
                includedInSelling: true,
                accountType: 'taxable'
              }));
              
              const measurement = monitor.startMeasurement('benchmark-' + size);
              const result = core.calculateTaxHarvesting(portfolio, { shortTerm: -3000, longTerm: 0 });
              const metrics = monitor.endMeasurement(measurement, result);
              
              console.log(\`Portfolio size \${size}: \${metrics.duration.toFixed(2)}ms\`);
              
              // Fail if performance is too slow
              if (metrics.duration > 5000) {
                console.error(\`Performance regression: \${size} positions took \${metrics.duration}ms\`);
                process.exit(1);
              }
            }
            
            console.log('Performance benchmarks passed!');
          "

  deploy-static:
    if: github.ref == 'refs/heads/main'
    needs: [test-backend, test-frontend, performance-test]
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
      
      - name: Create build directory
        run: |
          mkdir -p _site
          cp -r src/* _site/
          cp -r shared _site/
          
          # Create a simple index page that loads the shared libraries
          cat > _site/shared-test.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
            <title>Shared Libraries Test</title>
          </head>
          <body>
            <h1>Tax Harvesting Shared Libraries</h1>
            <div id="test-results"></div>
            
            <script src="./shared/taxHarvestingCore.js"></script>
            <script src="./shared/washSaleDetection.js"></script>
            <script src="./shared/performanceMonitor.js"></script>
            
            <script>
              // Test that libraries load correctly
              const core = new TaxHarvestingCore();
              const washSale = new WashSaleDetection();
              const monitor = new PerformanceMonitor();
              
              document.getElementById('test-results').innerHTML = 
                '<p>✅ TaxHarvestingCore v' + core.version + '</p>' +
                '<p>✅ WashSaleDetection loaded</p>' +
                '<p>✅ PerformanceMonitor loaded</p>';
            </script>
          </body>
          </html>
          EOF
          
          ls -la _site/
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './_site'
      
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Run security audit (backend)
        run: |
          cd backend
          npm audit --audit-level=high
      
      - name: Run security audit (frontend)
        run: |
          cd frontend
          npm audit --audit-level=high
